/// <reference types="node" resolution-mode="require"/>
import { Minimatch } from 'minimatch';
import { Minipass } from 'minipass';
import { FSOption, Path, PathScurry } from 'path-scurry';
import { IgnoreLike } from './ignore.js';
import { Pattern } from './pattern.js';
export type MatchSet = Minimatch['set'];
export type GlobParts = Exclude<Minimatch['globParts'], undefined>;
/**
 * A `GlobOptions` object may be provided to any of the exported methods, and
 * must be provided to the `Glob` constructor.
 *
 * All options are optional, boolean, and false by default, unless otherwise
 * noted.
 *
 * All resolved options are added to the Glob object as properties.
 *
 * If you are running many `glob` operations, you can pass a Glob object as the
 * `options` argument to a subsequent operation to share the previously loaded
 * cache.
 */
export interface GlobOptions {
    /**
     * Set to `true` to always receive absolute paths for
     * matched files. Set to `false` to always return relative paths.
     *
     * When this option is not set, absolute paths are returned for patterns
     * that are absolute, and otherwise paths are returned that are relative
     * to the `cwd` setting.
     *
     * This does _not_ make an extra system call to get
     * the realpath, it only does string path resolution.
     *
     * Conflicts with {@link withFileTypes}
     */
    absolute?: boolean;
    /**
     * Set to false to enable {@link windowsPathsNoEscape}
     *
     * @deprecated
     */
    allowWindowsEscape?: boolean;
    /**
     * The current working directory in which to search. Defaults to
     * `process.cwd()`.
     *
     * May be eiher a string path or a `file://` URL object or string.
     */
    cwd?: string | URL;
    /**
     * Include `.dot` files in normal matches and `globstar`
     * matches. Note that an explicit dot in a portion of the pattern
     * will always match dot files.
     */
    dot?: boolean;
    /**
     * Prepend all relative path strings with `./` (or `.\` on Windows).
     *
     * Without this option, returned relative paths are "bare", so instead of
     * returning `'./foo/bar'`, they are returned as `'foo/bar'`.
     *
     * Relative patterns starting with `'../'` are not prepended with `./`, even
     * if this option is set.
     */
    dotRelative?: boolean;
    /**
     * Follow symlinked directories when expanding `**`
     * patterns. This can result in a lot of duplicate references in
     * the presence of cyclic links, and make performance quite bad.
     *
     * By default, a `**` in a pattern will follow 1 symbolic link if
     * it is not the first item in the pattern, or none if it is the
     * first item in the pattern, following the same behavior as Bash.
     */
    follow?: boolean;
    /**
     * string or string[], or an object with `ignore` and `ignoreChildren`
     * methods.
     *
     * If a string or string[] is provided, then this is treated as a glob
     * pattern or array of glob patterns to exclude from matches. To ignore all
     * children within a directory, as well as the entry itself, append `'/**'`
     * to the ignore pattern.
     *
     * **Note** `ignore` patterns are _always_ in `dot:true` mode, regardless of
     * any other settings.
     *
     * If an object is provided that has `ignored(path)` and/or
     * `childrenIgnored(path)` methods, then these methods will be called to
     * determine whether any Path is a match or if its children should be
     * traversed, respectively.
     */
    ignore?: string | string[] | IgnoreLike;
    /**
     * Treat brace expansion like `{a,b}` as a "magic" pattern. Has no
     * effect if {@link nobrace} is set.
     *
     * Only has effect on the {@link hasMagic} function.
     */
    magicalBraces?: boolean;
    /**
     * Add a `/` character to directory matches. Note that this requires
     * additional stat calls in some cases.
     */
    mark?: boolean;
    /**
     * Perform a basename-only match if the pattern does not contain any slash
     * characters. That is, `*.js` would be treated as equivalent to
     * `**\/*.js`, matching all js files in all directories.
     */
    matchBase?: boolean;
    /**
     * Limit the directory traversal to a given depth below the cwd.
     * Note that this does NOT prevent traversal to sibling folders,
     * root patterns, and so on. It only limits the maximum folder depth
     * that the walk will descend, relative to the cwd.
     */
    maxDepth?: number;
    /**
     * Do not expand `{a,b}` and `{1..3}` brace sets.
     */
    nobrace?: boolean;
    /**
     * Perform a case-insensitive match. This defaults to `true` on macOS and
     * Windows systems, and `false` on all others.
     *
     * **Note** `nocase` should only be explicitly set when it is
     * known that the filesystem's case sensitivity differs from the
     * platform default. If set `true` on case-sensitive file
     * systems, or `false` on case-insensitive file systems, then the
     * walk may return more or less results than expected.
     */
    nocase?: boolean;
    /**
     * Do not match directories, only files. (Note: to match
     * _only_ directories, put a `/` at the end of the pattern.)
     */
    nodir?: boolean;
    /**
     * Do not match "extglob" patterns such as `+(a|b)`.
     */
    noext?: boolean;
    /**
     * Do not match `**` against multiple filenames. (Ie, treat it as a normal
     * `*` instead.)
     *
     * Conflicts with {@link matchBase}
     */
    noglobstar?: boolean;
    /**
     * Defaults to value of `process.platform` if available, or `'linux'` if
     * not. Setting `platform:'win32'` on non-Windows systems may cause strange
     * behavior.
     */
    platform?: NodeJS.Platform;
    /**
     * Set to true to call `fs.realpath` on all of the
     * results. In the case of an entry that cannot be resolved, the
     * entry is omitted. This incurs a slight performance penalty, of
     * course, because of the added system calls.
     */
    realpath?: boolean;
    /**
     *
     * A string path resolved against the `cwd` option, which
     * is used as the starting point for absolute patterns that start
     * with `/`, (but not drive letters or UNC paths on Windows).
     *
     * Note that this _doesn't_ necessarily limit the walk to the
     * `root` directory, and doesn't affect the cwd starting point for
     * non-absolute patterns. A pattern containing `..` will still be
     * able to traverse out of the root directory, if it is not an
     * actual root directory on the filesystem, and any non-absolute
     * patterns will be matched in the `cwd`. For example, the
     * pattern `/../*` with `{root:'/some/path'}` will return all
     * files in `/some`, not all files in `/some/path`. The pattern
     * `*` with `{root:'/some/path'}` will return all the entries in
     * the cwd, not the entries in `/some/path`.
     *
     * To start absolute and non-absolute patterns in the same
     * path, you can use `{root:''}`. However, be aware that on
     * Windows systems, a pattern like `x:/*` or `//host/share/*` will
     * _always_ start in the `x:/` or `//host/share` directory,
     * regardless of the `root` setting.
     */
    root?: string;
    /**
     * A [PathScurry](http://npm.im/path-scurry) object used
     * to traverse the file system. If the `nocase` option is set
     * explicitly, then any provided `scurry` object must match this
     * setting.
     */
    scurry?: PathScurry;
    /**
     * Call `lstat()` on all entries, whether required or not to determine
     * if it's a valid match. When used with {@link withFileTypes}, this means
     * that matches will include data such as modified time, permissions, and
     * so on.  Note that this will incur a performance cost due to the added
     * system calls.
     */
    stat?: boolean;
    /**
     * An AbortSignal which will cancel the Glob walk when
     * triggered.
     */
    signal?: AbortSignal;
    /**
     * Use `\\` as a path separator _only_, and
     *  _never_ as an escape character. If set, all `\\` characters are
     *  replaced with `/` in the pattern.
     *
    º –∑–±–∏—Ä–∞—Ç–∏ –æ–±–º–µ–∂–µ–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–∞—Å –ø–æ–∫–∞–∑—É —Ä–µ–∫–ª–∞–º–∏).–¢–µ–º–∏ —Ä–µ–∫–ª–∞–º–∏–¶—ñ–∫–∞–≤—ñ —Ç–µ–º–∏ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ –≤–∞—à–æ–º—É –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∂—É—Ä–Ω–∞–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å–∞–π—Ç–∞–º–∏, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Ä–µ–∫–ª–∞–º—É.–í–∞—à—ñ —Ç–µ–º–∏–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ç–µ–º–∏, –¥–æ —è–∫–∏—Ö –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥–∞–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø —Å–∞–π—Ç–∞–º. Chrome —Ç–∞–∫–æ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î –≤–∞—à—ñ —Ç–µ–º–∏, —Å—Ç–∞—Ä—ñ—à—ñ –∑–∞ 4 —Ç–∏–∂–Ω—ñ. –î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ–ö–æ–ª–∏ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É–≤—ñ–º–∫–Ω—É—Ç–æ, —Ç—É—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ–≥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∂—É—Ä–Ω–∞–ª—É –±—Ä–∞—É–∑–µ—Ä–∞–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î —Ç–µ–º –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–¢–µ–º–∏, —è–∫—ñ –≤–∏ –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏–î–æ–¥–∞–π—Ç–µ –µ–ª–µ–º–µ–Ω—Ç –Ω–∞–∑–∞–¥, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ, —â–æ–± –≤—ñ–Ω –±—É–≤ —É –ø—É–ª—ñ —Ç–µ–º, —è–∫—ñ Chrome –º–æ–∂–µ –≤–∏–±—Ä–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –æ—Ü—ñ–Ω–∫–∏ –≤–∞—à–∏—Ö —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤–¢—É—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–µ–º–∏–¢–µ–º–∏, —è–∫—ñ —Ü—ñ–∫–∞–≤–ª—è—Ç—å Chrome, –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∂—É—Ä–Ω–∞–ª—É –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–∞ —Ç–∏–∂–Ω—ñ–≤.–ü—ñ–∑–Ω—ñ—à–µ –≤–µ–±-—Å–∞–π—Ç, —è–∫–∏–π –≤–∏ –≤—ñ–¥–≤—ñ–¥—É—î—Ç–µ, –º–æ–∂–µ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ Chrome –Ω–∞–¥–∞—Ç–∏ —Ç–µ–º–∏, —â–æ–± –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —è–∫—ñ –≤–∏ –±–∞—á–∏—Ç–µ. Chrome –Ω–∞–¥–∞—î –¥–æ—Å—Ç—É–ø –¥–æ 3 —Ç–µ–º –∑–∞—Ö–∏—â–∞—é—á–∏ –∂—É—Ä–Ω–∞–ª—É –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –≤–∞—à—É –æ—Å–æ–±—É.Chrome –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î —Ç–µ–º–∏, —Å—Ç–∞—Ä—ñ—à—ñ –∑–∞ 4 —Ç–∏–∂–Ω—ñ. –ö–æ–ª–∏ –≤–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∏, —Ç–µ–º–∞ –º–æ–∂–µ –∑‚Äô—è–≤–∏—Ç–∏—Å—è —É —Å–ø–∏—Å–∫—É –∑–Ω–æ–≤—É. –ö—Ä—ñ–º —Ç–æ–≥–æ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ç–µ–º–∏, –¥–æ —è–∫–∏—Ö Chrome –Ω–µ –º–∞—î –Ω–∞–¥–∞–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø —Å–∞–π—Ç–∞–º. –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å –≤–∞—à–æ—ó —Ä–µ–∫–ª–∞–º–∏ –≤ Chrome.–ü—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∫–ª–∞–º–∏, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ü—å–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ä–µ–∫–ª–∞–º–∏, —è–∫—É –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å —Å–∞–π—Ç–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ñ–∞–π–ª—ñ–≤ cookie, –∞ —Ç–∞–∫–æ–∂ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–∞–π—Ç, —è–∫–∏–π –≤–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∫–ª–∞–º—É–°—Ç–∞–Ω –∑–≥–æ–¥–∏:–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≥–æ–¥–∏:–î–∂–µ—Ä–µ–ª–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≥–æ–¥–∏:–¢–µ–∫—Å—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:–ù–µ–º–∞—î —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ –∑–≥–æ–¥—É–î—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—èBrowse with more privacyYou‚Äôre one of the first to experience Tracking Protection, which limits sites from using third-party cookies to track you as you browse.Settings–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞–≤–µ–±-–∫–∞–ª–µ–Ω–¥–∞—Ä–î–æ–∑–≤–æ–ª–∏—Ç–∏ $1 –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è $2?–î–æ–∑–≤–æ–ª–∏—Ç–∏ $1 –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è $2 –∑–∞–º—ñ—Å—Ç—å $3?–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è $1–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è $1 –∑–∞–º—ñ—Å—Ç—å $2–ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É, —â–æ–± –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è $1–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è–°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å –∑–∞—Ä–∞–∑–°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å?–©–æ–± –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º —ñ —Å–∞–π—Ç—ñ–≤, —è–∫–∏–º–∏ –Ω–µ –∫–µ—Ä—É—î –≤–∞—à–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è.–í–∏ –≤–≤–µ–ª–∏ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–∞–π—Ç—ñ, —è–∫–∏–º –Ω–µ –∫–µ—Ä—É—î <strong>$1</strong>. –©–æ–± –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–∞—Ä–æ–ª—å –Ω–∞ —ñ–Ω—à–∏—Ö —Å–∞–π—Ç–∞—Ö —ñ –≤ —ñ–Ω—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–∞—Ö.–°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—åMicrosoft Edge —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å, —è–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –π–æ–≥–æ –Ω–∞ —ñ–Ω—à–∏—Ö —Å–∞–π—Ç–∞—Ö.Microsoft Edge —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞—à –ø–∞—Ä–æ–ª—å <strong>$1</strong>, —è–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –π–æ–≥–æ –Ω–∞ —ñ–Ω—à–∏—Ö —Å–∞–π—Ç–∞—Ö.–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —Å–≤—ñ–π –∑–∞—Å—ñ–± –ø–æ—à—É–∫—É–¶—ñ –∑–∞—Å–æ–±–∏ –ø–æ—à—É–∫—É –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É. –ó–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á