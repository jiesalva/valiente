Ω–µ –æ–Ω—ã“£ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã–Ω –±—ñ–ª–≥—ñ—Å—ñ –∫–µ–ª–µ–¥—ñ. –°–∞–π—Ç “õ–∞–Ω–¥–∞–π “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –∫—ñ–ª—Ç—ñ–Ω “õ–æ–ª–¥–∞–Ω“ì–∞–Ω—ã“£—ã–∑–¥—ã –Ω–∞“õ—Ç—ã –±—ñ–ª–µ—Ç—ñ–Ω –±–æ–ª–∞–¥—ã.$1 –±–∞“ì–¥–∞—Ä–ª–∞–º–∞—Å—ã–Ω–∞ –∫—ñ—Ä—É “Ø—à—ñ–Ω “õ“±—Ä—ã–ª“ì—ã–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É –∫–µ—Ä–µ–∫ –ø–µ?InPrivate —Ä–µ–∂–∏–º—ñ–Ω–µ–Ω —à—ã“õ“õ–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –∫—ñ—Ä—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ –æ—Å—ã “õ“±—Ä—ã–ª“ì—ã–¥–∞ —Å–∞“õ—Ç–∞–ª–∞–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ —Å—ñ–∑ –±“±–ª –≤–µ–±-—Å–∞–π—Ç“õ–∞ “õ“±—Ä—ã–ª“ì—ã“£—ã–∑ –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä–µ –∞–ª–∞—Å—ã–∑.“ö“±—Ä—ã–ª“ì—ã–ª–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É$1 “Ø—à—ñ–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –∂–∞—Å–∞—É–ë“±–ª –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ —Ç–µ–∫ Windows Hello —ñ—à—ñ–Ω–¥–µ —Å–∞“õ—Ç–∞–ª–∞–¥—ã–ë“±–ª –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ —Ç–µ–∫ Windows Hello —ñ—à—ñ–Ω–¥–µ —Å–∞“õ—Ç–∞–ª–∞–¥—ã. –û–ª —Å—ñ–∑ –±–∞—Ä–ª—ã“õ InPrivate —Ç–µ—Ä–µ–∑–µ–ª–µ—Ä—ñ–Ω –∂–∞–ø“õ–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –æ—Å—ã “õ“±—Ä—ã–ª“ì—ã–¥–∞ “õ–∞–ª–∞–¥—ã.–ö—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –∂–∞—Å–∞—É$1 “Ø—à—ñ–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –∂–∞—Å–∞—É –∂–æ–ª—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑–ö—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É$1 –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ “õ–∞–π “õ“±—Ä—ã–ª“ì—ã–¥–∞ –±–∞—Ä –µ–∫–µ–Ω—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑$1 –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É–ö—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑$1 “Ø—à—ñ–Ω “õ–∞–Ω–¥–∞–π –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?–¢–µ–ª–µ—Ñ–æ–Ω–¥–∞ –Ω–µ–º–µ—Å–µ –ø–ª–∞–Ω—à–µ—Ç—Ç–µ –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –∂–∞—Å–∞—É$1 “Ø—à—ñ–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω “õ“±—Ä—ã–ª“ì—ã –∫–∞–º–µ—Ä–∞—Å—ã –∞—Ä“õ—ã–ª—ã –æ—Å—ã QR –∫–æ–¥—Ç—ã —Å–∫–∞–Ω–µ—Ä–ª–µ“£—ñ–∑–ë–∞—Å“õ–∞ “õ“±—Ä—ã–ª“ì—ã–¥–∞–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É –∫–µ—Ä–µ–∫ –ø–µ?$1 “Ø—à—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ –±–∞—Ä “õ“±—Ä—ã–ª“ì—ã –∞—Ä“õ—ã–ª—ã –æ—Å—ã QR –∫–æ–¥—Ç—ã —Å–∫–∞–Ω–µ—Ä–ª–µ“£—ñ–∑–ë–∞—Å“õ–∞ “õ“±—Ä—ã–ª“ì—ã–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É–ë–∞—Å“õ–∞ –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ÉUSB “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –∫—ñ–ª—Ç—ñ–Ω–¥–µ $1 “Ø—à—ñ–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª—Å–µ, –æ–Ω—ã “õ–∞–∑—ñ—Ä “õ–æ—Å—ã“£—ã–∑ –∂”ô–Ω–µ —Ç“Ø—Ä—Ç—ñ“£—ñ–∑$1 –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ USB “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –∫—ñ–ª—Ç—ñ–Ω–¥–µ –±–æ–ª—Å–∞, –æ–Ω—ã “õ–∞–∑—ñ—Ä “õ–æ—Å—ã“£—ã–∑ –∂”ô–Ω–µ —Ç“Ø—Ä—Ç—ñ“£—ñ–∑$1 “Ø—à—ñ–Ω –∫—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω —Ç–∞“£–¥–∞—É–û—Å—ã “õ“±—Ä—ã–ª“ì—ã–¥–∞"$1" “õ“±—Ä—ã–ª“ì—ã—Å—ã–Ω–∞–Ω–ë–∞—Å“õ–∞ “õ“±—Ä—ã–ª“ì—ã–ª–∞—Ä–¥–∞Chrome –ø—Ä–æ—Ñ–∏–ª—ñ“£—ñ–∑–¥–µ–ΩWindows Hello –±–∞“ì–¥–∞—Ä–ª–∞–º–∞—Å—ã–Ω–∞–Ω–ñ–∞“£–∞ –±“Ø–π—ñ—Ä–ª—ñ–∫ —Ç–∞“õ—Ç–∞–¥–∞ —ñ–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω —Ç–µ–∑—ñ—Ä–µ–∫ —Å–∞–ª—ã—Å—Ç—ã—Ä—É“ö–æ—Å—ã–º—à–∞ —ñ–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω –∫”©—Ä—É–ë“Ø–π—ñ—Ä–ª—ñ–∫ —Ç–∞“õ—Ç–∞–¥–∞“ì—ã —ñ–∑–¥–µ—É–¥—ñ –∞—à—É–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Ç–∞–∑–∞–ª–∞—É “Ø—à—ñ–Ω –±–∞—Ä–ª—ã“õ InPrivate —Ç–µ—Ä–µ–∑–µ–ª–µ—Ä—ñ–Ω –∂–∞–±—ã“£—ã–∑InPrivate —à–æ–ª—É —Å–µ–∞–Ω—Å—ã–Ω–¥–∞“ì—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä “ì–∞–Ω–∞ —Ç–∞–∑–∞—Ä—Ç—ã–ª–∞–¥—ã–¢–µ—Ä–µ–∑–µ–ª–µ—Ä–¥—ñ –∂–∞–±—ÉInPrivate —Ä–µ–∂–∏–º—ñ–Ω–¥–µ —à–æ–ª—É –∫–µ–∑—ñ–Ω–¥–µ —Å—ñ–∑ –∫—ñ—Ä–≥–µ–Ω —Å–∞–π—Ç—Ç–∞—Ä —Å–∞“õ—Ç–∞–ª–º–∞–π–¥—ãInPrivate —Ä–µ–∂–∏–º—ñ–Ω–¥–µ —à–æ–ª—É —Ç–∞—Ä–∏—Ö—ã–Ω “õ“±—Ä—ã–ª“ì—ã“£—ã–∑–¥–∞–Ω —Ç–∞–∑–∞–ª–∞—É “Ø—à—ñ–Ω –±–∞—Ä–ª—ã“õ InPrivate —Ç–µ—Ä–µ–∑–µ–ª–µ—Ä—ñ–Ω –∂–∞–±—ã“£—ã–∑InPrivate —Ç–µ—Ä–µ–∑–µ—Å—ñ–Ω –∂–∞–±—É–ü–∞–π–¥–∞–ª—ã–ü–∞–π–¥–∞–ª—ã –µ–º–µ—Å{NUM_FILES, plural,
        =0 {–û—Å—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ“£ “±–π—ã–º–Ω—ã“£ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç—ñ–≥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ...}
        =1 {–û—Å—ã —Ñ–∞–π–ª–¥—ã“£ “±–π—ã–º–Ω—ã“£ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç—ñ–≥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ...}
      one {–û—Å—ã —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ “±–π—ã–º–Ω—ã“£ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç—ñ–≥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ...}
      other {–û—Å—ã —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ “±–π—ã–º–Ω—ã“£ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç—ñ–≥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ...}}–ë“±–ª “õ“±–∂–∞—Ç—Ç—ã“£ “±–π—ã–º—ã“£—ã–∑–¥—ã“£ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç—É—Ä–∞–ª—ã —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ —Å”ô–π–∫–µ—Å—Ç—ñ–≥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ‚Ä¶{NUM_FILES, plural,
        =0 {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—Ç–µ—Ä—ñ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã. –î–µ—Ä–µ–∫—Ç–µ—Ä—ñ“£—ñ–∑ –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—ã–Ω–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã.}
        =1 {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—Ç–µ—Ä—ñ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã. –§–∞–π–ª—ã“£—ã–∑ –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—ã–Ω–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã.}
      one {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—Ç–µ—Ä—ñ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã. –§–∞–π–ª–¥–∞—Ä—ã“£—ã–∑ –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—ã–Ω–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã.}
      other {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—Ç–µ—Ä—ñ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã. –§–∞–π–ª–¥–∞—Ä—ã“£—ã–∑ –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—ã–Ω–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã.}}“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫—Ç—ñ —Ç–µ–∫—Å–µ—Ä—É–ª–µ—Ä –æ—Ä—ã–Ω–¥–∞–ª–¥—ã. “ö“±–∂–∞—Ç—ã“£—ã–∑ –±–∞—Å—ã–ø —à—ã“ì–∞—Ä—ã–ª–∞–¥—ã.{NUM_FILES, plural,
        =0 {–ë“±–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä –Ω–µ–º–µ—Å–µ “õ“±—Ä—ã–ª“ì—ã“£—ã–∑ “±–π—ã–º—ã“£—ã–∑–¥—ã“£ –∫–µ–π–±—ñ—Ä “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ —Å–∞–π –∫–µ–ª–º–µ–π–¥—ñ. –ù–µ–Ω—ñ —Ç“Ø–∑–µ—Ç—É –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω ”ô–∫—ñ–º—à—ñ–¥–µ–Ω —Å“±—Ä–∞“£—ã–∑.}
        =1 {–ë“±–ª —Ñ–∞–π–ª –Ω–µ–º–µ—Å–µ “õ“±—Ä—ã–ª“ì—ã“£—ã–∑ “±–π—ã–º—ã“£—ã–∑–¥—ã“£ –∫–µ–π–±—ñ—Ä “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ —Å–∞–π –∫–µ–ª–º–µ–π–¥—ñ. –ù–µ–Ω—ñ —Ç“Ø–∑–µ—Ç—É –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω ”ô–∫—ñ–º—à—ñ–¥–µ–Ω —Å“±—Ä–∞“£—ã–∑.}
      one {–ë“±–ª —Ñ–∞–π–ª–¥–∞—Ä “±–π—ã–º—ã“£—ã–∑–¥—ã“£ –∫–µ–π–±—ñ—Ä “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ —Å–∞–π –∫–µ–ª–º–µ–π–¥—ñ. –ù–µ–Ω—ñ —Ç“Ø–∑–µ—Ç—É –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω ”ô–∫—ñ–º—à—ñ–¥–µ–Ω —Å“±—Ä–∞“£—ã–∑.}
      other {–ë“±–ª —Ñ–∞–π–ª–¥–∞—Ä “±–π—ã–º—ã“£—ã–∑–¥—ã“£ –∫–µ–π–±—ñ—Ä “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ —Å–∞–π –∫–µ–ª–º–µ–π–¥—ñ. –ù–µ–Ω—ñ —Ç“Ø–∑–µ—Ç—É –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω ”ô–∫—ñ–º—à—ñ–¥–µ–Ω —Å“±—Ä–∞“£—ã–∑.}}–ë“±–ª “õ“±–∂–∞—Ç –Ω–µ–º–µ—Å–µ “õ“±—Ä—ã–ª“ì—ã“£—ã–∑ “±–π—ã–º—ã“£—ã–∑–¥—ã“£ –∫–µ–π–±—ñ—Ä “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Å–∞—è—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ —Å–∞–π –∫–µ–ª–º–µ–π–¥—ñ. –ù–µ–Ω—ñ —Ç“Ø–∑–µ—Ç—É –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω ”ô–∫—ñ–º—à—ñ–¥–µ–Ω —Å“±—Ä–∞“£—ã–∑.–°–æ–Ω–¥–∞ –¥–∞ –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É{NUM_FILES, plural,
        =1 {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—ñ–Ω –æ—Ä—ã–Ω–¥–∞—É “Ø—à—ñ–Ω –±“±–ª —Ñ–∞–π–ª –∫”©–ª–µ–º—ñ —Ç—ã–º “Ø–ª–∫–µ–Ω. –ö”©–ª–µ–º—ñ 50 –ú–±–∞–π—Ç“õ–∞ –¥–µ–π—ñ–Ω–≥—ñ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—É“ì–∞ –±–æ–ª–∞–¥—ã.}
      one {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—ñ–Ω –æ—Ä—ã–Ω–¥–∞—É “Ø—à—ñ–Ω –±“±–ª —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ –∫–µ–π–±—ñ—Ä—ñ–Ω—ñ“£ –∫”©–ª–µ–º—ñ —Ç—ã–º “Ø–ª–∫–µ–Ω. –ö”©–ª–µ–º—ñ 50 –ú–±–∞–π—Ç“õ–∞ –¥–µ–π—ñ–Ω–≥—ñ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—É“ì–∞ –±–æ–ª–∞–¥—ã.}
      other {“ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ —Ç–µ–∫—Å–µ—Ä—ñ—Å—ñ–Ω –æ—Ä—ã–Ω–¥–∞—É “Ø—à—ñ–Ω –±“±–ª —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ –∫–µ–π–±—ñ—Ä—ñ–Ω—ñ“£ –∫”©–ª–µ–º—ñ —Ç—ã–º “Ø–ª–∫–µ–Ω. –ö”©–ª–µ–º—ñ 50 –ú–±–∞–π—Ç“õ–∞ –¥–µ–π—ñ–Ω–≥—ñ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ–ø —Å–∞–ª—É“ì–∞ –±–æ–ª–∞–¥—ã.}}–ë“±–ª “õ“±–∂–∞—Ç “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫—Ç—ñ —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω —Ç—ã–º “Ø–ª–∫–µ–Ω. 50 –ú–ë-“õ–∞ –¥–µ–π—ñ–Ω–≥—ñ “õ“±–∂–∞—Ç—Ç–∞—Ä–¥—ã –±–∞—Å—ã–ø —à—ã“ì–∞—Ä—É“ì–∞ –±–æ–ª–∞–¥—ã.{NUM_FILES, plural,
        =1 {–ë“±–ª —Ñ–∞–π–ª —à–∏—Ñ—Ä–ª–∞–Ω“ì–∞–Ω. –ò–µ—Å—ñ–Ω–µ–Ω —Ñ–∞–π–ª —à–∏—Ñ—Ä—ã–Ω –∞—à—É–¥—ã —Å“±—Ä–∞“£—ã–∑.}
      one {–û—Å—ã —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ –∫–µ–π–±—ñ—Ä—ñ —à–∏—Ñ—Ä–ª–∞–Ω“ì–∞–Ω. –ò–µ—Å—ñ–Ω–µ–Ω –æ–ª–∞—Ä–¥—ã“£ —à–∏—Ñ—Ä—ã–Ω –∞—à—É–¥—ã —Å“±—Ä–∞“£—ã–∑.}
      other {–û—Å—ã —Ñ–∞–π–ª–¥–∞—Ä–¥—ã“£ –∫–µ–π–±—ñ—Ä—ñ —à–∏—Ñ—Ä–ª–∞–Ω“ì–∞–Ω. –ò–µ—Å—ñ–Ω–µ–Ω –æ–ª–∞—Ä–¥—ã“£ —à–∏—Ñ—Ä—ã–Ω –∞—à—É–¥—ã —Å“±—Ä–∞“£—ã–∑.}}”ò–∫—ñ–º—à—ñ“£—ñ–∑ –±—ã–ª–∞–π –¥–µ–π–¥—ñ: "$1".$1 —Ñ–∞–π–ª—ã “õ“±–ø–∏—è–ª—ã–ª—ã“õ –Ω–µ–º–µ—Å–µ “õ–∞—É—ñ–ø—Ç—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–º—Ç–∏–¥—ã. ”ò–∫—ñ–º—à—ñ“£—ñ–∑–¥—ñ“£ –∞–π—Ç—É—ã: "$2".–û—Å—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∫–µ—Ä—ñ –∂“Ø–∫—Ç–µ—É —Å–µ–±–µ–±—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:–û—Å—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ–ø –∞–ª—É —Å–µ–±–µ–±—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:–°–∫–∞–Ω–µ—Ä–ª–µ—É –æ—Ä—ã–Ω–¥–∞–ª—É–¥–∞, “õ–∞–∑—ñ—Ä –∞—à—É –∫–µ—Ä–µ–∫ –ø–µ?–ë–µ–ª–≥—ñ—Å—ñ–∑ —Ñ–∞–π–ª “õ–∞—É—ñ–ø—Ç—ñ –º–∞–∑–º“±–Ω –±–æ–π—ã–Ω—à–∞ —Å–∫–∞–Ω–µ—Ä–ª–µ–Ω—É–¥–µ.–§–∞–π–ª–¥—ã –∞—à–ø–∞—Å –±“±—Ä—ã–Ω —Å–∫–∞–Ω–µ—Ä–ª–µ—É “õ–∞–∂–µ—Ç –ø–µ?$1 “õ–∞—É—ñ–ø—Ç—ñ –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω. –ö–µ“£–µ–π—Ç—ñ–ª–≥–µ–Ω “õ–æ—Ä“ì–∞—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ –∑–∏—è–Ω–¥—ã –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–Ω—ã“£ –±–∞—Ä-–∂–æ“õ—Ç—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω –±“±–ª —Ñ–∞–π–ª–¥—ã Microsoft h
     * the cwd, then this ends up being equivalent to the fullpathPosix()
     * On posix systems, this is identical to relative().
     */
    relativePosix(): string;
    /**
     * The fully resolved path string for this Path entry
     */
    fullpath(): string;
    /**
     * On platforms other than windows, this is identical to fullpath.
     *
     * On windows, this is overridden to return the forward-slash form of the
     * full UNC path.
     */
    fullpathPosix(): string;
    /**
     * Is the Path of an unknown type?
     *
     * Note that we might know *something* about it if there has been a previous
     * filesystem operation, for example that it does not exist, or is not a
     * link, or whether it has child entries.
     */
    isUnknown(): boolean;
    isType(type: Type): boolean;
    getType(): Type;
    /**
     * Is the Path a regular file?
     */
    isFile(): boolean;
    /**
     * Is the Path a directory?
     */
    isDirectory(): boolean;
    /**
     * Is the path a character device?
     */
    isCharacterDevice(): boolean;
    /**
     * Is the path a block device?
     */
    isBlockDevice(): boolean;
    /**
     * Is the path a FIFO pipe?
     */
    isFIFO(): boolean;
    /**
     * Is the path a socket?
     */
    isSocket(): boolean;
    /**
     * Is the path a symbolic link?
     */
    isSymbolicLink(): boolean;
    /**
     * Return the entry if it has been subject of a successful lstat, or
     * undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* simply
     * mean that we haven't called lstat on it.
     */
    lstatCached(): PathBase | undefined;
    /**
     * Return the cached link target if the entry has been the subject of a
     * successful readlink, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readlink() has been called at some point.
     */
    readlinkCached(): PathBase | undefined;
    /**
     * Returns the cached realpath target if the entry has been the subject
     * of a successful realpath, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * realpath() has been called at some point.
     */
    realpathCached(): PathBase | undefined;
    /**
     * Returns the cached child Path entries array if the entry has been the
     * subject of a successful readdir(), or [] otherwise.
     *
     * Does not read the filesystem, so an empty array *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readdir() has been called recently enough to still be valid.
     */
    readdirCached(): PathBase[];
    /**
     * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
     * any indication that readlink will definitely fail.
     *
     * Returns false if the path is known to not be a symlink, if a previous
     * readlink failed, or if the entry does not exist.
     */
    canReadlink(): boolean;
    /**
     * Return true if readdir has previously been successfully called on this
     * path, indicating that cachedReaddir() is likely valid.
     */
    calledReaddir(): boolean;
    /**
     * Returns true if the path is known to not exist. That is, a previous lstat
     * or readdir failed to verify its existence when that would have been
     * expected, or a parent entry was marked either enoent or enotdir.
     */
    isENOENT(): boolean;
    /**
     * Return true if the path is a match for the given path name.  This handles
     * case sensitivity and unicode normalization.
     *
     * Note: even on case-sensitive systems, it is **not** safe to test the
     * equality of the `.name` property to determine whether a given pathname
     * matches, due to unicode normalization mismatches.
     *
     * Always use this method instead of testing the `path.name` property
     * directly.
     */
    isNamed(n: string): boolean;
    /**
     * Return the Path object corresponding to the target of a symbolic link.
     *
     * If the Path is not a symbolic link, or if the readlink call fails for any
     * reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     */
    readlink(): Promise<PathBase | undefined>;
    /**
     * Synchronous {@link PathBase.readlink}
     */
    readlinkSync(): PathBase | undefined;
    /**
     * Call lstat() on this Path, and update all known information that can be
     * determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    lstat(): Promise<PathBase | undefined>;
    /**
     * synchronous {@link PathBase.lstat}
     */
    lstatSync(): PathBase | undefined;
    /**
     * Standard node-style callback interface to get list of directory entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     *
     * @param cb The callback called with (er, entries).  Note that the `er`
     * param is somewhat extraneous, as all readdir() errors are handled and
     * simply result in an empty set of entries being returned.
     * @param allowZalgo Boolean indicating that immediately known results should
     * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
     * zalgo at your peril, the dark pony lord is devious and unforgiving.
     */
    readdirCB(cb: (er: NodeJS.ErrnoException | null, entries: PathBase[]) => any, allowZalgo?: boolean): void;
    /**
     * Return an array of known child entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    readdir(): Promise<PathBase[]>;
    /**
     * synchronous {@link PathBase.readdir}
     */
    readdirSync(): PathBase[];
    canReaddir(): boolean;
    shouldWalk(dirs: Set<PathBase | undefined>, walkFilter?: (e: PathBase) => boolean): boolean;
    /**
     * Return the Path object corresponding to path as resolved
     * by realpath(3).
     *
     * If the realpath call fails for any reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     * On success, returns a Path object.
     */
    realpath(): Promise<PathBase | undefined>;
    /**
     * Synchronous {@link realpath}
     */
    realpathSync(): PathBase | undefined;
    /**
     * Internal method to mark this Path object as the scurry cwd,
     * called by {@link PathScurry#chdir}
     *
     * @internal
     */
    [setAsCwd](oldCwd: PathBase): void;
}
/**
 * Path class used on win32 systems
 *
 * Uses `'\\'` as the path separator for returned paths, either `'\\'` or `'/'`
 * as the path separator for parsing paths.
 */
export declare class PathWin32 extends PathBase {
    /**
     * Separator for generating path strings.
     */
    sep: '\\';
    /**
     * Separator for parsing path strings.
     */
    splitSep: RegExp;
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name: string, type: number | undefined, root: PathBase | undefined, roots: {
        [k: string]: PathBase;
    }, nocase: boolean, children: ChildrenCache, opts: PathOpts);
    /**
     * @internal
     */
    newChild(name: string, type?: number, opts?: PathOpts): PathWin32;
    /**
     * @internal
     */
    getRootString(path: string): string;
    /**
     * @internal
     */
    getRoot(rootPath: string): PathBase;
    /**
     * @internal
     */
    sameRoot(rootPath: string, compare?: string): boolean;
}
/**
 * Path class used on all posix systems.
 *
 * Uses `'/'` as the path separator.
 */
export declare class PathPosix extends PathBase {
    /**
     * separator for parsing path strings
     */
    splitSep: '/';
    /**
     * separator for generating path strings
     */
    sep: '/';
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name: string, type: number | undefined, root: PathBase | undefined, roots: {
        [k: string]: PathBase;
    }, nocase: boolean, children: ChildrenCache, opts: PathOpts);
    /**
     * @internal
     */
    getRootString(path: string): string;
    /**
     * @internal
     */
    getRoot(_rootPath: string): PathBase;
    /**
     * @internal
     */
    newChild(name: string, type?: number, opts?: PathOpts): PathPosix;
}
/**
 * Options that may be provided to the PathScurry constructor
 */
export interface PathScurryOpts {
    /**
     * perform case-insensitive path matching. Default based on platform
     * subclass.
     */
    nocase?: boolean;
    /**
     * Number of Path entries to keep in the cache of Path child references.
     *
     * Setting this higher than 65536 will dramatically increase the data
     * consumption and construction time overhead of each PathScurry.
     *
     * Setting this value to 256 or lower will significantly reduce the data
     * consumption and construction time overhead, but may also reduce resolve()
     * and readdir() performance on large filesystems.
     *
     * Default `16384`.
     */
    childrenCacheSize?: number;
    /**
     * An object that overrides the built-in functions from the fs and
     * fs/promises modules.
     *
     * See {@link FSOption}
     */
    fs?: FSOption;
}
/**
 * The base class for all PathScurry classes, providing the interface for path
 * resolution and filesystem operations.
 *
 * Typically, you should *not* instantiate this class directly, but rather one
 * of the platform-specific classes, or the exported {@link PathScurry} which
 * defaults to the current platform.
 */
export declare abstract class PathScurryBase {
    #private;
    /**
     * The root Path entry for the current working directory of this Scurry
     */
    root: PathBase;
    /**
     * The string path for the root of this Scurry's current working directory
     */
    rootPath: string;
    /**
     * A collection of all roots encountered, referenced by rootPath
     */
    roots: {
        [k: string]: PathBase;
    };
    /**
     * The Path entry corresponding to this PathScurry's current working directory.
     */
    cwd: PathBase;
    /**
     * Perform path comparisons case-insensitively.
     *
     * Defaults true on Darwin and Windows systems, false elsewhere.
     */
    nocase: boolean;
    /**
     * The path separator used for parsing paths
     *
     * `'/'` on Posix systems, either `'/'` or `'\\'` on Windows
     */
    abstract sep: string | RegExp;
    /**
     * This class should not be instantiated directly.
     *
     * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry
     *
     * @internal
     */
    constructor(cwd: string | URL | undefined, pathImpl: typeof win32 | typeof posix, sep: string | RegExp, { nocase, childrenCacheSize, fs, }?: PathScurryOpts);
    /**
     * Get the depth of a provided path, string, or the cwd
     */
    depth(path?: Path | string): number;
    /**
     * Parse the root portion of a path string
     *
     * @internal
     */
    abstract parseRootPath(dir: string): string;
    /**
     * create a new Path to use as root during construction.
     *
     * @internal
     */
    abstract newRoot(fs: FSValue): PathBase;
    /**
     * Determine whether a given path string is absolute
     */
    abstract isAbsolute(p: string): boolean;
    /**
     * Return the cache of child entries.  Exposed so subclasses can create
     * child Path objects in a platform-specific way.
     *
     * @internal
     */
    childrenCache(): ChildrenCache;
    /**
     * Resolve one or more path strings to a resolved string
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolve(...paths: string[]): string;
    /**
     * Resolve one or more path strings to a resolved string, returning
     * the posix path.  Identical to .resolve() on posix systems, but on
     * windows will return a forward-slash separated UNC path.
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolvePosix(...paths: string[]): string;
    /**
     * find the relative path from the cwd to the supplied path string or entry
     */
    relative(entry?: PathBase | string): string;
    /**
     * find the relative path from the cwd to the supplied path string or
     * entry, using / as the path delimiter, even on Windows.
     */
    relativePosix(entry?: PathBase | string): string;
    /**
     * Return the basename for the provided string or Path object
     */
    basename(entry?: PathBase | string): string;
    /**
     * Return the dirname for the provided string or Path object
     */
    dirname(entry?: PathBase | string): string;
    /**
     * Return an array of known child entries.
     *
     * First argument may be either a string, or a Path object.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     *
     * Unlike `fs.readdir()`, the `withFileTypes` option defaults to `true`. Set
     * `{ withFileTypes: false }` to return strings.
     */
    readdir(): Promise<PathBase[]>;
    readdir(opts: {
        withFileTypes: true;
    }): Promise<PathBase[]>;
    readdir(opts: {
        withFileTypes: false;
    }): Promise<string[]>;
    readdir(opts: {
        withFileTypes: boolean;
    }): Promise<PathBase[] | string[]>;
    readdir(entry: PathBase | string): Promise<PathBase[]>;
    readdir(entry: PathBase | string, opts: {
        withFileTypes: true;
    }): Promise<PathBase[]>;
    readdir(entry: PathBase | string, opts: {
        withFileTypes: false;
    }): Promise<string[]>;
    readdir(entry: PathBase | string, opts: {
        withFileTypes: boolean;
    }): Promise<PathBase[] | string[]>;
    /**
     * synchronous {@link PathScurryBase.readdir}
     */
    readdirSync(): PathBase[];
    readdirSync(opts: {
        withFileTypes: true;
    }): PathBase[];
    readdirSync(opts: {
        withFileTypes: false;
    }): string[];
    readdirSync(opts: {
        withFileTypes: boolean;
    }): PathBase[] | string[];
    readdirSync(entry: PathBase | string): PathBase[];
    readdirSync(entry: PathBase | string, opts: {
        withFileTypes: true;
    }): PathBase[];
    readdirSync(entry: PathBase | string, opts: {
        withFileTypes: false;
    }): string[];
    readdirSync(entry: PathBase | string, opts: {
        withFileTypes: boolean;
    }): PathBase[] | string[];
    /**
     * Call lstat() on the string or Path object, and update all known
     * information that can be determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    lstat(entry?: string | PathBase): Promise<PathBase | undefined>;
    /**
     * synchronous {@link PathScurryBase.lstat}
     */
    lstatSync(entry?: string | PathBase): PathBase | undefined;
    /**
     * Return the Path object or string path corresponding to the target of a
     * symbolic link.
     *
     * If the path is not a symbolic link, or if the readlink call fails for any
     * reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     *
     * `{withFileTypes}` option defaults to `false`.
     *
     * On success, returns a Path object if `withFileTypes` option is true,
     * otherwise a string.
     */
    readlink(): Promise<string | undefined>;
    readlink(opt: {
        withFileTypes: false;
    }): Promise<string | undefined>;
    readlink(opt: {
        withFileTypes: true;
    }): Promise<PathBase | undefined>;
    readlink(opt: {
        withFileTypes: boolean;
    }): Promise<PathBase | string | undefined>;
    readlink(entry: string | PathBase, opt?: {
        withFileTypes: false;
    }): Promise<string | undefined>;
    readlink(entry: string | PathBase, opt: {
        withFileTypes: true;
    }): Promise<PathBase | undefined>;
    readlink(entry: string | PathBase, opt: {
        withFileTypes: boolean;
    }): Promise<string | PathBase | undefined>;
    /**
     * synchronous {@link PathScurryBase.readlink}
     */
    readlinkSync(): string | undefined;
    readlinkSync(opt: {
        withFileTypes: false;
    }): string | undefined;
    readlinkSync(opt: {
        withFileTypes: true;
    }): PathBase | undefined;
    readlinkSync(opt: {
        withFileTypes: boolean;
    }): PathBase | string | undefined;
    readlinkSync(entry: string | PathBase, opt?: {
        withFileTypes: false;
    }): string | undefined;
    readlinkSync(entry: string | PathBase, opt: {
        withFileTypes: true;
    }): PathBase | undefined;
    readlinkSync(entry: string | PathBase, opt: {
        withFileTypes: boolean;
    }): string | PathBase | undefined;
    /**
     * Return the Path object or string path corresponding to path as resolved
     * by realpath(3).
     *
     * If the realpath call fails for any reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     *
     * `{withFileTypes}` option defaults to `false`.
     *
     * On success, returns a Path object if `withFileTypes` option is true,
     * otherwise a string.
     */
    realpath(): Promise<string | undefined>;
    realpath(opt: {
        withFileTypes: false;
    }): Promise<string | undefined>;
    realpath(opt: {
        withFileTypes: true;
    }): Promise<PathBase | undefined>;
    realpath(opt: {
        withFileTypes: boolean;
    }): Promise<PathBase | string | undefined>;
    realpath(entry: string | PathBase, opt?: {
        withFileTypes: false;
    }): Promise<string | undefined>;
    realpath(entry: string | PathBase, opt: {
        withFileTypes: true;
    }): Promise<PathBase | undefined>;
    realpath(entry: string | PathBase, opt: {
        withFileTypes: boolean;
    }): Promise<string | PathBase | undefined>;
    realpathSync(): string | undefined;
    realpathSync(opt: {
        withFileTypes: false;
    }): string | undefined;
    realpathSync(opt: {
        withFileTypes: true;
    }): PathBase | undefined;
    realpathSync(opt: {
        withFileTypes: boolean;
    }): PathBase | string | undefined;
    realpathSync(entry: string | PathBase, opt?: {
        withFileTypes: false;
    }): string | undefined;
    realpathSync(entry: string | PathBase, opt: {
        withFileTypes: true;
    }): PathBase | undefined;
    realpathSync(entry: string | PathBase, opt: {
        withFileTypes: boolean;
    }): string | PathBase | undefined;
    /**
     * Async—Ç—ã–Ω –º–æ–¥—É–ª—å–¥–µ—Ä–ñ–∞“£–∞ —á–∞—Ç—Ç—ã“£ “õ–æ—Å—ã–ª–∞—Ç—ã–Ω –º–æ–¥—É–ª—å–¥–µ—Ä—ñ–Ω –æ—Å—ã–Ω–¥–∞ “õ–æ—Å—ã–ª“ì–∞–Ω–¥–∞–π —Ç–∞–±—É “Ø—à—ñ–Ω “õ–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.“ö–æ—Å—ã–ª–∞—Ç—ã–Ω –º–æ–¥—É–ª—å–¥–µ—Ä–º–µ–Ω Bing —á–∞—Ç—ã–Ω –∂–∞“õ—Å–∞—Ä—Ç—É–ö–µ–π–±—ñ—Ä “õ–æ—Å—ã–ª–∞—Ç—ã–Ω –º–æ–¥—É–ª—å–¥–µ—Ä –∞–ª–¥—ã–Ω –∞–ª–∞ –æ—Ä–Ω–∞—Ç—ã–ª“ì–∞–Ω –∂”ô–Ω–µ –∂“Ø–π–µ–≥–µ –∫—ñ—Ä–≥–µ–Ω “õ“±—Ä—ã–ª“ì—ã–ª–∞—Ä–¥–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –±–æ–ª–∞–¥—ã.–æ“õ—ã—Ç—É—à—ã–ª—ã“õ –∫–µ“£–µ—Å—Ç—ñ –∂–∞–±—É“ö–∞–∑—ñ—Ä –±–∞–π“õ–∞–ø –∫”©—Ä—É–ë“±–ª “õ–æ—Å—ã–ª–∞—Ç—ã–Ω –º–æ–¥—É–ª—å “õ–∞—É—ñ–ø—Å—ñ–∑ ”ô—Ä–µ–∫–µ—Ç–∫–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∞–∂—ã—Ä–∞—Ç—ã–ª–¥—ã.$1 “õ–æ—Å—ã–º—à–∞ –º”ô–∑—ñ—Ä —Ç“Ø–π–º–µ—à—ñ–≥—ñ$1 –º–æ–¥—É–ª—ñ–Ω—ñ“£ ”©—à—ñ—Ä—É–ª—ñ “õ–æ—Å—ã–º—à–∞ –º”ô–∑—ñ—Ä —Ç“Ø–π–º–µ—à—ñ–≥—ñ–ß–∞—Ç—Ç—ã“£ “õ–æ—Å—ã–ª–∞—Ç—ã–Ω –º–æ–¥—É–ª—ñ–Ω –∂–æ—éMicrosoft —Ç—ñ—Ä–∫–µ–ª–≥—ñ—Å—ñ–Ω–µ–Ω "$1" –∂–æ—é “õ–∞–∂–µ—Ç –ø–µ?–ê–ª—É–ë—ñ—Ä—ã“£“ì–∞–π —Å–∞“õ—Ç–∞—É –æ—Ä–Ω—ã–ë“Ø–π—ñ—Ä–ª—ñ–∫ —Ç–∞“õ—Ç–∞–Ω—ã –±–æ—Å–∞—Ç—É–ë“Ø–π—ñ—Ä–ª—ñ–∫ —Ç–∞“õ—Ç–∞–Ω—ã –±–µ–∫—ñ—Ç—É–ë“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ“õ–∞ –±–µ—Ç—Ç—ñ “õ–æ—Å—É–°–∞–π—Ç—Ç–∞—Ä–¥—ã —ñ–∑–¥–µ—É–ë“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ“õ–∞ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Å–∞–π—Ç—Ç—ã –Ω–µ–º–µ—Å–µ –≤–µ–±-–±–µ—Ç—Ç—ñ “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã–ë“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ“õ–∞ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Å–∞–π—Ç—Ç—ã –Ω–µ–º–µ—Å–µ –≤–µ–±-–±–µ—Ç—Ç—ñ “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã. –ê“ì—ã–º–¥–∞“ì—ã –±–µ—Ç—Ç—ñ “õ–æ—Å—ã“£—ã–∑, —Ç–∞–Ω—ã–º–∞–ª —Å–∞–π—Ç—Ç—ã —ñ–∑–¥–µ“£—ñ–∑ –Ω–µ–º–µ—Å–µ —Å–∞–π—Ç—Ç—ã –±“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ“õ–∞ “õ–æ—Å—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ “Ø–∑–¥—ñ–∫ —Å–∞–π—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.–ë“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ“õ–∞ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Å–∞–π—Ç—Ç—ã –Ω–µ–º–µ—Å–µ –≤–µ–±-–±–µ—Ç—Ç—ñ “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã. –ê“ì—ã–º–¥–∞“ì—ã –±–µ—Ç—Ç—ñ “õ–æ—Å—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ —Ç”©–º–µ–Ω–¥–µ —Ç–∞–Ω—ã–º–∞–ª —Å–∞–π—Ç—Ç—ã —ñ–∑–¥–µ“£—ñ–∑.–ë“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ“õ–∞ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Å–∞–π—Ç—Ç—ã –Ω–µ–º–µ—Å–µ –≤–µ–±-–±–µ—Ç—Ç—ñ “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã. –ê“ì—ã–º–¥–∞“ì—ã –±–µ—Ç—Ç—ñ “õ–æ—Å—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ —Ç”©–º–µ–Ω–¥–µ “Ø–∑–¥—ñ–∫ —Å–∞–π—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä–¥—ã –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—É$1 ‚Äî $2“ö–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—É“ì–∞ –¥–µ–π—ñ–Ω –∫”©—Ä—Å–µ—Ç–ø–µ—É–û—Å—ã —Å–∞–π—Ç “Ø—à—ñ–Ω –∫”©—Ä—Å–µ—Ç–ø–µ—É–ë–∞—Ä–ª—ã“ì—ã–Ω –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—É–ë–∞—Ä–ª—ã“ì—ã–Ω –∫–µ–π—ñ–Ω–≥–µ “õ–∞–ª–¥—ã—Ä—É–¥–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—É–ë–∞—Å“õ–∞—Ä—ã–ª–∞—Ç—ã–Ω –±—Ä–∞—É–∑–µ—Ä–ª–µ—Ä “Ø—à—ñ–Ω ”©—à—ñ—Ä—ñ–ª–≥–µ–Ω.–°—ñ–∑–¥—ñ“£ “±–π—ã–º—ã“£—ã–∑ —Ç–∞—Ä–∞–ø—ã–Ω–∞–Ω –±–∞—Å“õ–∞—Ä—ã–ª–∞–¥—ã.–ë“Ø–π—ñ—Ä–ª—ñ–∫ —Ç–∞“õ—Ç–∞ –µ–Ω–¥—ñ –∫”©—Ä—ñ–Ω—ñ–ø —Ç“±—Ä–ë“Ø–π—ñ—Ä–ª—ñ–∫ —Ç–∞“õ—Ç–∞ –µ–Ω–¥—ñ –∂–∞—Å—ã—Ä—ã–ª–¥—ã–ê–≤—Ç–æ–Ω–æ–º–¥—ã –±“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ–®—ã“ì—É–ë“Ø–π—ñ—Ä–ª—ñ–∫ –∂–æ–ª–∞“õ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —ñ—Å–∫–µ “õ–æ—Å—É–ê–ª“ì–∞ —ñ–∑–¥–µ—É–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω ”©“£–¥–µ—É–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–æ—é¬´$1¬ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ —Å—ñ–∑ –∂”ô–Ω–µ –æ–Ω—ã“£ –±–∞—Ä–ª—ã“õ –º“Ø—à–µ–ª–µ—Ä—ñ “Ø—à—ñ–Ω –∂–æ–π—ã–ª–∞–¥—ã. –û—Å—ã –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∂—É—Ä–Ω–∞–ª—ã“£—ã–∑ –±–µ–Ω —Ç–∞“£–¥–∞—É–ª—ã–ª–∞—Ä—ã“£—ã–∑ –¥–∞ –∂–æ–π—ã–ª–∞–¥—ã.¬´$1¬ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –û—Å—ã –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∂—É—Ä–Ω–∞–ª—ã“£—ã–∑ –±–µ–Ω —Ç–∞“£–¥–∞—É–ª—ã–ª–∞—Ä—ã“£—ã–∑ –¥–∞ –∂–æ–π—ã–ª–∞–¥—ã.$1 –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ–Ω —à—ã“ì—É “õ–∞–∂–µ—Ç –µ–∫–µ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ “õ“±—Ä—ã–ª“ì—ã“£—ã–∑–¥–∞–Ω –∂–æ–π—ã–ª–∞–¥—ã. –ë“±–ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∂—É—Ä–Ω–∞–ª –º–µ–Ω —Ç–∞“£–¥–∞—É–ª—ã–ª–∞—Ä –æ—Å—ã –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω—ñ“£ –±–∞—Å“õ–∞ –º“Ø—à–µ–ª–µ—Ä—ñ–Ω–µ ”ô–ª—ñ –¥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –±–æ–ª–∞–¥—ã.¬´$1¬ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–æ—é –∫–µ—Ä–µ–∫ –ø–µ?¬´$1¬ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ–Ω —à—ã“ì—É –∫–µ—Ä–µ–∫ –ø–µ?–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ –∞—Ä“õ—ã–ª—ã —à–æ–ª—É ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ “±–π—ã–º–¥–∞—Å—Ç—ã—Ä—ã“£—ã–∑ –∂”ô–Ω–µ –æ“£–∞–π –±—ñ—Ä–ª–µ—Å—ñ–ø —à–æ–ª—É “Ø—à—ñ–Ω –±–∞—Å“õ–∞–ª–∞—Ä–º–µ–Ω –±”©–ª—ñ—Å—ñ“£—ñ–∑.{NUM_TABS, plural,
    =1 {{NUM_TABS} “õ–æ–π—ã–Ω—à–∞}
    one {{NUM_TABS} “õ–æ–π—ã–Ω—à–∞}
    other {{NUM_TABS} “õ–æ–π—ã–Ω—à–∞}}{NUM_TABS, plural,
      =1 {{NUM_TABS} –æ—Ä—Ç–∞“õ “õ–æ–π—ã–Ω—à–∞}
      one {{NUM_TABS} –æ—Ä—Ç–∞“õ “õ–æ–π—ã–Ω—à–∞}
      other {{NUM_TABS} –æ—Ä—Ç–∞“õ “õ–æ–π—ã–Ω—à–∞}}–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –±–∞—Å“õ–∞ “õ“±—Ä—ã–ª“ì—ã–ª–∞—Ä–¥–∞–Ω “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∂”ô–Ω–µ –±—ñ—Ä–ª–µ—Å–∫–µ–Ω –∂“±–º—ã—Å “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä—ã–º–µ–Ω –±”©–ª—ñ—Å—É “Ø—à—ñ–Ω –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ–Ω–¥–µ —Å–∞“õ—Ç–∞–π–¥—ã.–ñ–∞“£–∞—Å—ã–Ω –∂–∞—Å–∞—É–ñ–∞“£–∞ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–∞—Å–∞—É$1 –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–ñ–∞“£–∞ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–ê—Ç–∞—É—ã –∂–æ“õ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–ñ–∞“£–∞ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ –∂—ã–ª–∂—ã—Ç“õ—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω “õ–æ–π—ã–Ω—à–∞–ª–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:–ñ–∞“£–∞ –±–æ—Å –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–∞—Å–∞—É–ù–µ–º–µ—Å–µ–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω—ñ“£ –∞–ª–¥—ã–Ω –∞–ª–∞ “õ–∞—Ä–∞—É –Ω“±—Å“õ–∞—Å—ã–û—Ä—Ç–∞“õ –ø–∞–π–¥–∞–ª–∞–Ω—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å—ñ–ª—Ç–µ–º–µ –∂–∞—Å–∞–ª—É–¥–∞‚Ä¶“ö–∞—Ç–µ: –æ—Ä—Ç–∞“õ –ø–∞–π–¥–∞–ª–∞–Ω—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –∂–∞—Å–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã–°—ñ–ª—Ç–µ–º–µ–Ω—ñ –∫”©—à—ñ—Ä—É —Å”ô—Ç—Å—ñ–∑ –±–æ–ª–¥—ã–ë”©–ª—ñ—Å—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ –∞–ª—ã–Ω—É–¥–∞–ë”©–ª—ñ—Å—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂–∞—Å–∞—É–ë–∞—Ä–ª—ã“õ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ “Ø–ª–≥—ñ–ª–µ—Ä—ñ–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ“£—ñ–∑–¥—ñ –æ—Å—ã —ñ—Ä—ñ–∫—Ç–µ–ª–≥–µ–Ω “Ø–ª–≥—ñ–ª–µ—Ä–¥—ñ“£ –±—ñ—Ä—ñ–º–µ–Ω –±–∞—Å—Ç–∞“£—ã–∑–ö“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑. –ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ“£—ñ–∑ –∂“Ø–∫—Ç–µ–ª—É–¥–µ‚Ä¶$1 –∞—à—ã–ª—É–¥–∞‚Ä¶–ñ–∞“£–∞ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ“£—ñ–∑ –∂–∞—Å–∞–ª—É–¥–∞‚Ä¶¬´–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω –∂–∞—Å—ã—Ä—É¬ª —Ç“Ø–π–º–µ—à—ñ–≥—ñ¬´–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω –∫”©—Ä—Å–µ—Ç—É¬ª —Ç“Ø–π–º–µ—à—ñ–≥—ñ–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ —à–∞“õ—ã—Ä—É–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ —á–∞—Ç—ã–Ω –∞—à—É–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ–Ω —à—ã“ì—É“ö–∞—Ç–µ: –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å“ö–∞—Ç–µ: $1 –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã“ö–∞—Ç–µ: $1 –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –û—Å—ã –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∞—à—É “Ø—à—ñ–Ω, Microsoft Edge –±—Ä–∞—É–∑–µ—Ä—ñ–Ω—ñ“£ —Å–æ“£“ì—ã –Ω“±—Å“õ–∞—Å—ã–Ω–∞ –∂–∞“£–∞—Ä—Ç—ã“£—ã–∑.–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ “õ–æ—Å—ã–ª—É–¥–∞, –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑“ö–∞—Ç–µ: “õ–æ—Å—ã–ª—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã. –î“±—Ä—ã—Å –∂”ô–Ω–µ —Ç–æ–ª—ã“õ URL –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã–ø –∂–∞—Ç“õ–∞–Ω—ã“£—ã–∑“ì–∞ –∫”©–∑ –∂–µ—Ç–∫—ñ–∑—ñ“£—ñ–∑.“ö–∞—Ç–µ: –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ “õ–æ—Å—ã–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –û—Å—ã –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∞—à—É “Ø—à—ñ–Ω, Microsoft Edge –±—Ä–∞—É–∑–µ—Ä—ñ–Ω—ñ“£ —Å–æ“£“ì—ã –Ω“±—Å“õ–∞—Å—ã–Ω–∞ –∂–∞“£–∞—Ä—Ç—ã“£—ã–∑.“ö–∞—Ç–µ: –∫“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞—Ç–µ –∫–æ–¥—ã: $1“ö–∞—Ç–µ: URL —Å“±—Ä–∞—É—ã–Ω ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ “õ–∞—Ç–µ–≥–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã “õ–æ—Å—ã–ª—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å. ”ò—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑. “ö–∞—Ç–µ –∫–æ–¥—ã: $1“ö–∞—Ç–µ: –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ “õ–æ—Å—ã–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. $1 —Ç—ñ—Ä–∫–µ–ª–≥—ñ—Å—ñ–º–µ–Ω –∫—ñ—Ä—ñ–ø, “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.“ö–∞—Ç–µ: –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ “õ–æ—Å—ã–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ê“ì—ã–º–¥–∞“ì—ã –ø—Ä–æ—Ñ–∏–ª—å “Ø—à—ñ–Ω Edge –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ “õ–æ—Å—ã–ª“ì–∞–Ω—ã–Ω–∞ –∫”©–∑ –∂–µ—Ç–∫—ñ–∑—ñ“£—ñ–∑.“ö–∞—Ç–µ: –∂–∞“£–∞ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–∞—Å–∞—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å“ö–∞—Ç–µ: –µ–Ω–¥—ñ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω–µ “õ–∞—Ç—ã–Ω–∞—Å—ã“£—ã–∑ –∂–æ“õ. –û–ª –µ–Ω–≥—ñ–∑—É–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω –∂–æ–π—ã–ª–∞–¥—ã.–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω–µ “õ–∞–Ω–∞“ì–∞—Ç—Ç–∞–Ω–¥—ã“£—ã–∑ –±–∞?–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑$1 —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã.$1 —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã.–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω—ñ“£ —Ç—ñ–∑—ñ–º—ñ –∂–∞“£–∞—Ä—Ç—ã–ª—É–¥–∞–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ —Ç—É—Ä–∞–ª—ã “õ–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ “õ“±–ø–∏—è–ª—ã–ª—ã“ì—ã —Ç—É—Ä–∞–ª—ã “õ–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—ÇMicrosoft Edge –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω—ñ“£ –∞–ª–¥—ã–Ω –∞–ª–∞ “õ–∞—Ä–∞—É –Ω“±—Å“õ–∞—Å—ã –µ–Ω–¥—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ!Edge Workspace –∞—Ä“õ—ã–ª—ã –±—ñ—Ä–≥–µ —à–æ–ª—ã“£—ã–∑.–ö–µ–ª–µ—Å—ñ —Å–∞–ø–∞—Ä—ã“£—ã–∑–¥—ã –∂”ô–Ω–µ —Ç.–±. –∂–æ—Å–ø–∞—Ä–ª–∞—É “Ø—à—ñ–Ω Edge Workspace –∞—Ä“õ—ã–ª—ã –±—ñ—Ä–≥–µ —à–æ–ª—ã“£—ã–∑–¥–∞—Ä.–ê–ª–¥—ã–Ω –∞–ª–∞ “õ–∞—Ä–∞—É –Ω“±—Å“õ–∞—Å—ã–Ω–∞ “õ–æ—Å—ã–ª—É–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ. –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–¥—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.$1 –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ —Ç–µ—Ä–µ–∑–µ—Å—ñ –∞—à—ã“õ.–ë–∞—Ä–ª—ã“õ –∞—à—ã“õ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ —Ç–µ—Ä–µ–∑–µ–ª–µ—Ä—ñ –∂–∞–±—ã–ª—É–¥–∞.$1 –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ —Ç–µ—Ä–µ–∑–µ—Å—ñ –∂–∞–±—ã–ª—É–¥–∞.–ë“±–ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ Microsoft Edge —à–æ–ª“ì—ã—à—ã–Ω—ã“£ —Å–æ“£“ì—ã –Ω“±—Å“õ–∞—Å—ã–Ω–∞ –∂–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω. –û–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—É–¥—ã –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É –∂”ô–Ω–µ –±–∞—Ä–ª—ã“õ ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–∞–∑—ñ—Ä –∂–∞“£–∞—Ä—Ç—ã“£—ã–∑. –®–æ–ª“ì—ã—à –∂–∞“£–∞—Ä—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–∞–¥—ã.–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—É–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω—ñ“£ “õ–∞—Ç–µ—Å—ñ–ë“±–ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ –∞–∂—ã—Ä–∞—Ç—ã–ª“ì–∞–Ω –∂”ô–Ω–µ –±–æ–ª–∞—à–∞“õ—Ç–∞“ì—ã –±–∞—Ä–ª—ã“õ ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–º–∞–π–¥—ã. –û–Ω—ã“£ –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É “Ø—à—ñ–Ω –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–∞–±—ã“£—ã–∑.–ë“±–ª –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ –∞–∂—ã—Ä–∞—Ç—ã–ª“ì–∞–Ω –∂”ô–Ω–µ –±–∞—Ä–ª—ã“õ –±–æ–ª–∞—à–∞“õ—Ç–∞“ì—ã ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–º–∞–π–¥—ã.–ñ“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω –∂–∞–±—É–ë—Ä–∞—É–∑–µ—Ä–¥—ñ –∂–∞“£–∞—Ä—Ç—É–ñ—É—Ä–Ω–∞–ª–¥–∞—Ä–¥—ã —Ç–∞–∑–∞–ª–∞—ÉJSON —Ñ–∞–π–ª—ã–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç—Ç–∞—É–≠–∫—Å–ø–æ—Ä—Ç—Ç–∞–ª“ì–∞–Ω JSON —Ñ–∞–π–ª—ã –∂“±–º—ã—Å –∫–µ“£—ñ—Å—Ç—ñ–≥—ñ–Ω—ñ“£ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∂—É—Ä–Ω–∞–ª—ã–Ω “õ–∞–º—Ç–∏–¥—ã. “ö–∞—Ç—ã—Å—É—à—ã–Ω—ã“£ —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞ –º–µ–∫–µ–Ω–∂–∞–π–ª–∞—Ä—ã —Å–∏—è“õ—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∞–Ω—ã“õ—Ç–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω –∞“õ–ø–∞—Ä–∞—Ç “õ–æ—Å—ã–ª–º–∞–π–¥—ã.–ñ—É—Ä–Ω–∞–ª–¥–∞—Ä–¥—ã –∞–Ω–æ–Ω–∏–º–¥—ñ –µ—Ç—É –∂”ô–Ω–µ —Ç–∞“£–¥–∞–ª“ì–∞–Ω —Ñ–∞–π–ª“ì–∞ –∂–∞–∑—É. –û–Ω—ã –∞—è“õ—Ç–∞—É “Ø—à—ñ–Ω –±—ñ—Ä–∞–∑ —É–∞“õ—ã—Ç “õ–∞–∂–µ—Ç –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω.JSON —Ñ–∞–π–ª—ã–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç—Ç–∞—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã.JSON —Ñ–∞–π–ª—ã–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç—Ç–∞—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã.–ñ“±–º—ã—Å –∫–µ“£—